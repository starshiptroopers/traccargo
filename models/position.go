// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Position position
//
// swagger:model Position
type Position struct {

	// accuracy
	Accuracy float64 `json:"accuracy,omitempty"`

	// address
	Address string `json:"address,omitempty"`

	// altitude
	Altitude float64 `json:"altitude,omitempty"`

	// attributes
	Attributes interface{} `json:"attributes,omitempty"`

	// course
	Course float64 `json:"course,omitempty"`

	// device Id
	DeviceID int64 `json:"deviceId,omitempty"`

	// in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
	// Format: date-time
	DeviceTime strfmt.DateTime `json:"deviceTime,omitempty"`

	// in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
	// Format: date-time
	FixTime strfmt.DateTime `json:"fixTime,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// latitude
	Latitude float64 `json:"latitude,omitempty"`

	// longitude
	Longitude float64 `json:"longitude,omitempty"`

	// network
	Network interface{} `json:"network,omitempty"`

	// outdated
	Outdated bool `json:"outdated,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
	// Format: date-time
	ServerTime strfmt.DateTime `json:"serverTime,omitempty"`

	// in knots
	Speed float64 `json:"speed,omitempty"`

	// valid
	Valid bool `json:"valid,omitempty"`
}

// Validate validates this position
func (m *Position) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Position) validateDeviceTime(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceTime) { // not required
		return nil
	}

	if err := validate.FormatOf("deviceTime", "body", "date-time", m.DeviceTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Position) validateFixTime(formats strfmt.Registry) error {
	if swag.IsZero(m.FixTime) { // not required
		return nil
	}

	if err := validate.FormatOf("fixTime", "body", "date-time", m.FixTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Position) validateServerTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ServerTime) { // not required
		return nil
	}

	if err := validate.FormatOf("serverTime", "body", "date-time", m.ServerTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this position based on context it is used
func (m *Position) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Position) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Position) UnmarshalBinary(b []byte) error {
	var res Position
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
